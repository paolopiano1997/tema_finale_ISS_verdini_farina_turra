System tearoom

Request enter : enter(ID)
Reply accept : accept(C)

Dispatch drinkready : drinkready(V)
Dispatch clientready : clientready(C)
Dispatch paymentready : paymentready(P)
Dispatch order : order(O)
Dispatch end : end (V)

Context ctxwaiter ip [ host="localhost" port=8068 ]
Context ctxBasicrobot ip [host="127.0.0.1" port=8020]
//Context ctxclient ip [ host="127.0.0.1" port=8020]

ExternalQActor basicrobot context ctxBasicrobot 
//ExternalQActor barman context ctxwaiter

QActor waiter context ctxwaiter {
[#
//	//Coordinates of the entrance door
	val XEntranceDoor = "0"
	val YEntranceDoor = "4"

//	//Coordinates of the exit door
	val XExitDoor = "6"
	val YExitDoor = "4"

//	//Coordinates Tables
	val X_teatable1     = "2"
	val Y_teatable1     = "3"

	val X_teatable2     = "5"
	val Y_teatable2     = "3"

	//Coordinates of the home
    val X_home			= "0"
	val Y_home 			= "0"

	//Time for serving a client
//	val servicetime = 1000L 


	val	Cleantime = 2000L
	val Servicetime = 5000L
	data class Table(var state: String ="cleaned") {
		
	}
	val table1 = Table()
	val table2 = Table()
	var stateTable1 = "cleaned"
	var stateTable2 = "cleaned"
#]
	State s0 initial {
		discardMsg Off
		println("Waiter    |||   init")
		run itunibo.planner.plannerUtil.initAI()
	}
	Goto home
	
	State home{
		println("waiter    |||   home")
		updateResource [# "home" #]
//		run itunibo.planner.plannerUtil.planForGoal(X_home,Y_home)
	}
	Transition t0 whenRequest enter -> accept
				  whenMsg clientready -> take
				  whenMsg drinkready -> serve
				  whenMsg paymentready -> collect
				  whenMsg end -> endwork
	
	
	State accept {
		println("waiter    |||   accept")
		replyTo enter with accept : accept(idclient)
	}
	Goto reachEntranceDoor
	
	State reachEntranceDoor {
		println("waiter    |||   reachEntranceDoor")
		updateResource[# "reachEntranceDoor" #]
		delay 2000
	}
	Goto convoyToTable
	
	State convoyToTable{
		println("waiter    |||   convoyToTable")
		[# table1.state= "occupied" #]
		println("waiter   |||   table state occupied")
		updateResource [# "convoyToTable" #]
		delay 3000
	}
	Goto home
	
	State take{
		println("waiter   |||   take")
		updateResource [# "take" #]
		onMsg ( clientready : clientready(C)) {
			//forward barman -m order : order(payloadArg(0))
		}
		delay 2000
	}
	Goto home
	
	State serve{
		println("waiter   |||   serve")
		updateResource[# "serve" #]
		delay 3000
	}
	Goto home
	
	State collect {
		println("waiter   |||   collect")
		updateResource[# "collect" #]
		delay 4000
	}
	Goto convoyToExitDoor
	
	State convoyToExitDoor{
		println("waiter   |||   convoyToExitDoor")
		updateResource[# "convoyToExitDoor" #]
		[# table1.state = "dirty" #]
		println("waiter   |||   table state dirty")
		delay 5000
	}
	Goto clean
	
	State clean{
		println("waiter   |||   clean")
		updateResource[# "clean1" #]
		delayVar Cleantime
		[# table1.state = "undirty" #]
		println("waiter   |||   table state undirty")
	}
	Goto clean2
	
	State clean2{
		println("waiter   |||   clean2")
		updateResource[# "clean2" #]
		delayVar Cleantime
		[# table1.state = "sanitized" #]
		println("waiter   |||   table state sanitized")
	}
	Goto clean3
	
	State clean3{
		println("waiter   |||   clean3")
		updateResource[# "clean3" #]
		delayVar Cleantime
		[# table1.state = "cleaned" #]
		println("waiter   |||   table state cleaned")
	}
	Goto home
	
	State endwork{
		println("waiter   |||   end")
		terminate 0
	}
}

//QActor client context ctxclient {
//	State s0 initial{
//		println("client   |||   init")
//	}
//	Goto req
//	
//	State req{
//		delay 2000
//		request waiter -m enter : enter(idclient)
//	}
//	Transition t0 whenReply accept -> prova
//	
//	State prova {
//		delay 6000
//		println("client   |||   clientready")
//		forward waiter -m clientready : clientready(cready)
//		delay 4000
//		
//		println("client   |||   drinkready")
//		forward waiter -m drinkready : drinkready(dready)
//		delay 6000
//		
//		println("client   |||   paymentready")
//		forward waiter -m paymentready : paymentready(pready)
//		delay 22000
//		
//		forward waiter -m end : end(end)
//	}
//}