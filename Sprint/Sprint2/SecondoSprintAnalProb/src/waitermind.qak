System tearoom

//Movements messages
Request moveto : moveto(X,Y)
Reply done : done(X,Y)

//Init messages
Request start : start(S)
Reply ready : ready(V)


Request 	moveto : moveto(X,Y)
Reply 		done   : done(X,Y)

Request 	start  : start(S)
Reply 		ready  : ready(V)
Request 	step       : step( TIME )
Reply   	stepdone   : stepdone(V)
Dispatch 	cmd        : cmd(MOVE)
Reply   	stepfail   : stepfail(DURATION, CAUSE)


Dispatch starttimer : starttimer(T)
Dispatch endtime : endtime(T)

Dispatch setTableState : setTableState(N,S)

Request tableState : tableState(N)
Reply state : state(N,S)

Request stoptimer : stoptimer(T)
Reply okStop : okStop(T)

Dispatch gotodirty : gotodirty(G)
Dispatch gotoundirty : gotoundirty(G)
Dispatch gotosanitized : gotosanitized(G)



//Client and tearoom messages
Request enter : enter(ID)
Reply accept : accept(C)
Dispatch drinkready : drinkready(V)
Dispatch clientready : clientready(C)
Dispatch paymentready : paymentready(P)
Dispatch order : order(O)
Dispatch end : end (E)

Dispatch starttimer : starttimer(T)
Dispatch endtime : endtime(T)

Dispatch startcleaner : startcleaner(T)
Dispatch cleanerdone : cleanerdone(C)
Dispatch stopcleaner : stopcleaner(C)

Dispatch occupy  : occupy(N)
Dispatch release : release(N)
Dispatch clean   : clean(N)

Request isClean : isClean(N)
Reply isCleanDone : isCleanDone(N,E)

Request isTableStopped : isTableStopped(T)
Reply isTableStoppedDone : isTableStoppedDone(E)

Dispatch gotohome : gotohome(G)

Dispatch gotoclean : gotoclean(G)
Dispatch gotoclean2 : gotoclean2(G)
Dispatch gotoclean3 : gotoclean3(G)

Dispatch gototable1 : gototable1(T)
Dispatch gototable2 : gototable2(T)

Request tableState : tableState(N)
Reply state : state(N,S)

Context ctxbasicrobot     ip [host="localhost"   port=8020]

Context ctxtearoom   ip [host="127.0.0.1" port=8050]  

//ExternalQActor teatables context ctxtearoom
//ExternalQActor waitercleaner context ctxtearoom
//ExternalQActor waiterengine context ctxtearoom

ExternalQActor basicrobot  context ctxbasicrobot

QActor waitermind context ctxtearoom{
[#
//	//Coordinates of the entrance door
	val X_Entrancedoor = "0"
	val Y_Entrancedoor = "4"

//	//Coordinates of the exit door
	val X_Exitdoor = "6"
	val Y_Exitdoor = "4"
	
//  //Coordinates of the barman
	val X_servicedesk = "6"
	val Y_servicedesk = "0"	

//	//Coordinates Tables
	val X_teatable1     = "2"
	val Y_teatable1     = "2"

	val X_teatable2     = "4"
	val Y_teatable2     = "2"

	//Coordinates of the home
    val X_home			= "0"
	val Y_home 			= "0"

	val Servicetime = 5000L
	val CollectTime = 4000L
	
#]
	State s0 initial {
		discardMsg Off
		println("waitermind   |||   init")
		request waiterengine -m start : start(id)
	}
	Transition t0 whenReply ready -> home
	
	State reachhome{
		println("waitermind   |||   reachhome")
		request waiterengine -m moveto : moveto($X_home,$Y_home)
	}
	Transition t0 whenReply done -> home
	
	State home{
		println("waitermind   |||   home")
		updateResource [# "home" #]
	}
	Transition t0 whenRequest enter -> accept
				  whenMsg clientready -> take
				  whenMsg drinkready -> reachBarman
				  whenMsg paymentready -> reachTableCollect
				  whenMsg end -> endwork
	
	State accept {
		println("waitermind   |||   accept")
		replyTo enter with accept : accept(idclient)
	}
	Goto reachEntranceDoor
	
	State reachEntranceDoor {
		println("waitermind   |||   reachEntranceDoor")
		//updateResource[# "reachEntranceDoor" #]
		request waiterengine -m moveto : moveto($X_Entrancedoor, $Y_Entrancedoor)
	}
	Transition t0 whenReply done -> checkTables
	
	State checkTables{
		println("waitermind   |||   checkTables")
		request teatables -m isClean : isClean(1)
	}
	Transition t0 whenReply isCleanDone -> checkIsCleanDone1
	
	State checkIsCleanDone1{
		onMsg(isCleanDone : isCleanDone(N,E)){
			if [# payloadArg(1)=="yes" #]{
				forward waitermind -m gototable1 : gototable1(table1)
			}
			else{
				request teatables -m isClean : isClean(2)
			}
		}
		[# readLine() #]
	}
	Transition t0 whenMsg gototable1 -> convoyToTable1
				whenReply isCleanDone -> checkIsCleanDone2
	
	State checkIsCleanDone2{
		onMsg(isCleanDone : isCleanDone(N,E)){
			if [# payloadArg(1)=="yes" #]{
				forward waitermind -m gototable2 : gototable2(table2)
			}
		}
	}
	Goto convoyToTable2
	
	State convoyToTable1{
		println("waitermind   |||   convoyToTable1")
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
//		[# table1.state= "occupied" #]
		forward teatables -m occupy : occupy(1)
		println("waitermind   |||   table1 state occupied")
		//updateResource [# "convoyToTable1" #]
		delay 5000
	}
	Transition t0 whenReply done -> checkCleanHome
	
	State convoyToTable2{
		println("waitermind   |||   convoyToTable2")
		request waiterengine -m moveto : moveto ($X_teatable2,$Y_teatable2)
		//[# table2.state= "occupied" #]
		forward teatables -m occupy : occupy(2)
		println("waitermind   |||   table2 state occupied")
		//updateResource [# "convoyToTable2" #]
		delay 5000
	}
	Transition t0 whenReply done -> checkCleanHome
	
	State checkCleanHome{
		[# readLine() #]
		println("waitermind   |||   checkClean")
		request waitercleaner -m isTableStopped : isTableStopped(isStopped)
	}
	Transition t0 whenReply isTableStoppedDone -> checkIsTableStopped
	

	State checkIsTableStopped{
		println("waitermind   |||   checkIsTableStopped")
		onMsg( isTableStoppedDone : isTableStoppedDone(E)){
			if [# payloadArg(0)=="0" #]{ //0 non è interrotto nessun clean
				forward waitermind -m gotohome : gotohome(go)
			}
			else{
				if[# payloadArg(0)=="1" #]{ //Interrotto clean table1
					forward waitermind -m gototable1 : gototable1(go)
				}
				else{
					//forward waitermind -m gototable2 : gototable2(go)
				}
			}
		}
	}
	Transition t0 whenMsg gotohome -> reachhome
				whenMsg gototable1 -> reachTable1CleanStopped
				//whenMsg gototable2 -> reachTable2CleanStopped per ora il modello associa al primo cliente sempre il table1, quindi non si verifica
	
	State reachTable1CleanStopped{
		println("waitermind   |||   reachTable1CleanStopped")
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> cleanTable1
	
	State take{
		println("waitermind   |||   take")
		updateResource [# "take" #]
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> transmit
	
	State transmit{
		println("waitermind   |||   transmit")
		updateResource [# "transmit" #]
		//forward barman -m order : order(payloadArg(0))
	}
	Goto reachhome
	
	State reachBarman{
		println("waitermind   |||   reachBarman")
		updateResource[# "reachBarman" #]
		request waiterengine -m moveto: moveto($X_servicedesk,$Y_servicedesk)
	}
	Transition t0 whenReply done -> serve
	
	State serve{
		println("waitermind   |||   serve")
		updateResource[# "serve" #]
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> reachhome
	
	State reachTableCollect {
		println("waitermind   |||   reachTable")
		updateResource[# "reachTable" #]
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> collect
	
	State reachTableClean {
		println("waitermind   |||   reachTable")
		updateResource[# "reachTable" #]
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> cleanTable1
	
	State collect {
		println("waitermind   |||   collect")
		updateResource[# "collect" #]
		delayVar CollectTime
	}
	Goto convoyToExitDoor
	
	State convoyToExitDoor{
		println("waitermind   |||   convoyToExitDoor")
		updateResource[# "convoyToExitDoor" #]
		request waiterengine -m moveto : moveto($X_Exitdoor,$Y_Exitdoor)
		forward teatables -m release : release(1)
		delay 5000
	}
	Transition t0 whenReply done -> reachTableClean
	
	State cleanTable1{
		println("waitermind   |||   cleanTable1")
		forward waitercleaner -m startcleaner : startcleaner(1)
	}
	Transition t0 whenMsg cleanerdone -> reachhome //Qua non posso ricevere altri messaggi per l'assunzione fatta
				whenRequest enter -> handleEnter
	
	State cleanTable2{
		println("waitermind   |||   cleanTable2")
		forward waitercleaner -m startcleaner : startcleaner(2)
	}
	Transition t0 whenMsg cleanerdone -> reachhome
	
	State handleEnter {
		forward waitercleaner -m stopcleaner : stopcleaner(stop)
	}
	Goto accept
	
	State endwork{
		println("waitermind   |||   end")
		terminate 0
	}
}



QActor timer context ctxtearoom {


	[# 
		var Time: Long = 0
		var StartTime : Long = 0	
		var Duration : Long	= 0
	#]
	State s0 initial {
		println("timer   |||   init")
	}
	Goto wait
	
	State wait {
		println("timer   |||   wait")
	}
	Transition t0 whenMsg starttimer -> start
	
	State start{
		onMsg(starttimer : starttimer(T)) {
			[# Time = payloadArg(0).toLong() #]
			memoCurrentTime StartTime
		}
	}
	Transition t0 whenTimeVar Time -> timeFinish
				whenRequest stoptimer -> stop
				
	State stop{
		setDuration Duration from StartTime
		replyTo stoptimer with okStop : okTop($Duration)
	}
	Goto wait
	
	State timeFinish{
		forward waitercleaner -m endtime : endtime(endtime)
	}
	Goto wait
}


QActor waitercleaner context ctxtearoom {


	[#
		var Table = ""
		val	Cleantime = 3000L
		var Clean = Cleantime
		
	#]
	State s0 initial{// Accettazione richieste/dispatch
		println("waitercleaner   |||   init")
	}
	Goto wait
	
	State wait {
		onMsg(isTableStopped : isTableStopped(T)){
			replyTo isTableStopped with isTableStoppedDone : isTableStoppedDone(0)
		}
		else{
			println("waitercleaner   |||   wait")
		}
	}
	Transition t0 whenMsg startcleaner		 -> preDirty
				  whenRequest isTableStopped -> wait


	State timerStop{
		request timer -m stoptimer : stoptimer(stop)
	}
	Transition t0 whenReply okStop -> stop
	
	State stop {
		updateResource[# "cleanStopped" #]
		onMsg(okStop : okStop(T)){
			[# Clean = Cleantime - payloadArg(0).toLong() #]
		}
	}
	Transition t0 whenMsg startcleaner -> preStart
				whenRequest isTableStopped -> replyTableStop
				
	State replyTableStop{
		replyTo isTableStopped with isTableStoppedDone : isTableStoppedDone($Table)
	}
	Goto stop
	
	State preStart{
		updateResource[# "nonStopped" #]
		onMsg(startcleaner : startcleaner(T)){
			request teatables -m tableState : tableState(payloadArg(0))
		}
	}
	Transition t0 whenReply state -> checkState
	
	State checkState {
		onMsg(state : state(N,S)){
			if[# payloadArg(0) == "dirty" #]{
				forward waitercleaner -m gotodirty : gotodirty(go)
			}
			else{
				if[# payloadArg(0)=="undirty" #]
				{
					forward waitercleaner -m gotoundirty : gotoundirty(go)
				}
				else{
					forward waitercleaner -m gotosanitized : gotosanitized(go)
				}
			}
		}
	}
	Transition t0 whenMsg gotodirty -> cleanDirty
					whenMsg gotoundirty -> cleanUndirty
					whenMsg gotosanitized -> cleanSanitized
					
	State preDirty{
		[# Clean = Cleantime #]
		onMsg(startcleaner : startcleaner(T)){
			[# Table = payloadArg(0) #]
		}
	}
	Goto cleanDirty
	
	State preUndirty{
		[# Clean = Cleantime #]
	}
	Goto cleanUndirty
	
	State preSanitized{
		[# Clean = Cleantime #]
	}
	Goto cleanSanitized
	
	State cleanDirty { //Inizio catena di clean
		onMsg(isTableStopped : isTableStopped(T)){
			replyTo isTableStopped with isTableStoppedDone : isTableStoppedDone(0)
		}
		else {
			forward timer -m starttimer : starttimer($Clean)
		}
	}
	Transition t0 whenMsg endtime -> preUndirty
				whenMsg stopcleaner -> timerStop
				whenRequest isTableStopped -> cleanDirty
				
	
	State cleanUndirty{
		onMsg(isTableStopped : isTableStopped(T)){
			replyTo isTableStopped with isTableStoppedDone : isTableStoppedDone(0)
		}
		else{
			forward teatables -m setTableState : setTableState($Table,undirty) //I forward andrebbero fatti solo una volta, così
			//invece vengono fatti ogni volta che resumiamo.
			forward timer -m starttimer : starttimer($Clean)
		}
		
	}
	Transition t0 whenMsg endtime -> preSanitized
				whenMsg stopcleaner -> timerStop
				whenRequest isTableStopped -> cleanUndirty
	
	State cleanSanitized{
		onMsg(isTableStopped : isTableStopped(T)){
			replyTo isTableStopped with isTableStoppedDone : isTableStoppedDone(0)
		}
		else{
			forward teatables -m setTableState : setTableState($Table,sanitized)
			forward timer -m starttimer : starttimer($Clean)
		}
		
	}
	Transition t0 whenMsg endtime -> cleanDone
				whenMsg stopcleaner -> timerStop
				whenRequest isTableStopped -> cleanSanitized
	
	State cleanDone{ //Messaggio al waitermind di "fine"
		forward teatables -m setTableState : setTableState($Table,cleaned)
		forward waitermind -m cleanerdone : cleanerdone(done)
	}
	Goto wait
	
}

QActor teatables context ctxtearoom{ 
[#
	var StateOfTables = ""
	var E = ""
	var Table = ""
#]
	State s0 initial{
		println("teatables START")
		solve( consult("tearoomkb.pl")	 )
	}
	Goto work
	
	State work{
		solve( stateOfTeatables(S) )
		ifSolved { [# StateOfTables = getCurSol("S").toString() #] }
		println("teatables s0: $StateOfTables")
		updateResource [# StateOfTables #]
	}
	Transition t0  whenMsg occupy -> engageTable
					whenMsg clean -> cleanTable
					whenMsg release -> release
				whenRequest isClean -> replyClean
					whenMsg setTableState -> setState
					whenRequest tableState -> tableState
					
					
	State release {
		println("teatables   |||   release")
		onMsg(release : release(N)){
			solve( releaseTable(N))
		}
	}
	Goto work
	
	
	State tableState{
		println("teateables   |||   tableState")
		onMsg(tableState : tableState(N)){
			[# Table = payloadArg(0) #]
			solve( getState(N,S))
			ifSolved{
				[# E = getCurSol("S").toString() #]
			}
			replyTo tableState with state : state($Table,$E)
		}
	}
	Goto work
					
	State setState{
		println("teatables   |||   setState")
		onMsg(setTableState : setTableState(N,S)){
			solve( setState(N,S) )
			ifSolved{
				solve( getState(N,S) )
				ifSolved{
					[# 
						println(getCurSol("S").toString())
					#]
				}
			}
		}
	}
	Goto work
					
	State replyClean {
		println("teatables   |||   replyClean")
		onMsg(isClean : isClean(N)){
			[# Table = payloadArg(0) #]
			println("onMsg isClean")
			solve( getState(N,S) )
			ifSolved{
				[# 
					E = getCurSol("S").toString()
					if(E == "clean")
						E = "yes"
					else
						E = "no"
				#]
			}
			replyTo isClean with isCleanDone : isCleanDone($Table,$E)
			println("replyTo isClean $E")
		}
	}
	Goto work
					
	State engageTable{
		printCurrentMessage
		onMsg( occupy : occupy(N) ){
			println("engageTable ${payloadArg(0)}")
			solve( occupyTable( $payloadArg(0) ) )	//could do anything
			solve( stateOfTeatables(S) )
			[# StateOfTables = getCurSol("S").toString() #]  
			println("teatables engageTable ${payloadArg(0)}: $StateOfTables")
			updateResource [# StateOfTables #]
		}
	}
	Goto work

	State cleanTable{
		printCurrentMessage
		onMsg( clean : clean(N) ){
			println("clean ${payloadArg(0)}")
			solve( cleanTable( $payloadArg(0) ) )	//could do anything
			solve( stateOfTeatables(S) )
			[# StateOfTables = getCurSol("S").toString() #]  
			println("teatables cleanTable ${payloadArg(0)}: $StateOfTables")
			updateResource [# StateOfTables #] 			 
		}
	}
	Goto work
}

QActor waiterengine context ctxtearoom {
	[#
		var XP = "0"
		var YP = "0"
		var CurMove = ""
		val inmapname  = "teaRoomExplored"
		var StepTime    	   = 348L
		val BackTime           = 2 * StepTime / 3
	#]
	State s0 initial{
		discardMsg On
		run itunibo.planner.plannerUtil.initAI() //init planner entity
		run itunibo.planner.plannerUtil.loadRoomMap( inmapname ) 		
		run itunibo.planner.plannerUtil.showCurrentRobotState()	
		println("waiterengine   |||   init")
	}
	Transition t0 whenRequest start -> started
	
	State started{
		println("waiterengine   |||   started")
		replyTo start with ready : ready(waiterengine)
	}
	Goto wait
	
	State wait{
		println("waiterengine   |||   wait")
		
	}
	Transition t0 whenRequest moveto -> planmove
	
	State planmove{
		onMsg( moveto : moveto(X,Y) ){
			[# XP = payloadArg(0)
			   YP = payloadArg(1)			  
			 #]
			println("waiterengine   |||   moveto ($XP,$YP)")
			run itunibo.planner.plannerUtil.planForGoal("$XP","$YP")
		}
	}
	Goto execPlanMove
	
	State execPlanMove{
		[#  CurMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
	}
	Goto execStep if [# CurMove == "w" #] else execMove
	
	State execStep {
		request basicrobot -m step : step( $StepTime  )
	}
	Transition t0   whenReply stepdone   -> stepDone
					whenReply stepfail   -> stepFailed
	
	State stepDone{
		updateResource [# itunibo.planner.plannerUtil.getMapOneLine() #]
		run itunibo.planner.plannerUtil.updateMap(  "w" )
  	}
	Goto execPlanMove if [# CurMove.length > 0 #] else endSuccess
	
	State stepFailed{
 		println("waiterengine | stepFailed")
		onMsg(stepfail : stepfail(DURATION, CAUSE) ){
			[# val D = payloadArg(0).toLong()  ; val Dt = Math.abs(StepTime-D); val BackT = D/2 #] 
			println("waiterengine stepFail D= $D, BackTime = ${BackTime}")
			if [# D > BackTime #] {
				forward basicrobot -m cmd : cmd( s )
				delayVar BackTime
				forward basicrobot -m cmd : cmd( h )
			}	
 		}
 	}  
	Goto execPlanMove if [# CurMove.length > 0 #] else endSuccess

	State execMove{
		forward basicrobot -m cmd : cmd($CurMove)
 		run itunibo.planner.plannerUtil.updateMap( "$CurMove" )
 		delay 200
	}
	Goto execPlanMove if [# CurMove.length > 0 #] else endSuccess
	
	State endSuccess{
		updateResource [# "($XP,$YP)" #]
		println("waiterengine   |||   endSuccess, curpos=($XP,$YP)")
		run itunibo.planner.plannerUtil.showCurrentRobotState()
		replyTo moveto with done : done($XP,$YP)
	}
	Goto wait
} 

//QActor client context ctxtearoom {
//	State s0 initial{
//		println("client   |||   init")
//	}
//	Goto doSomething
//	
//	State doSomething{
//		println("client   |||   sending enter request")
//		request waitermind -m enter : enter(id)
//	}
//	Transition t0 whenReply accept -> ok
//	
//	State ok{
//		println("client   |||   accepted")
//		delay 15000
//		println("client   |||   ready")
//		forward waitermind -m clientready : clientready(id)
//		delay 15000
//		println("barman   |||   ready")
//		forward waitermind -m drinkready : drinkready(id)
//		delay 15000
//		forward waitermind -m paymentready : paymentready(id)
//		delay 10000
//		request waitermind -m enter : enter(id)
//		delay 20000
//		forward waitermind -m end : end(end)
//	}
//}