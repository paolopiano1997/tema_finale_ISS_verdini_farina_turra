System tearoom

//Movements messages
Request moveto : moveto(X,Y)
Reply done : done(X,Y)

//Init messages
Request start : start(S)
Reply ready : ready(V)

//Client and tearoom messages
Request enter : enter(ID)
Reply accept : accept(C)
Dispatch drinkready : drinkready(V)
Dispatch clientready : clientready(C)
Dispatch paymentready : paymentready(P)
Dispatch order : order(O)
Dispatch end : end (E)

Dispatch startcleaner : startcleaner(T)
Dispatch cleanerdone : cleanerdone(C)
Dispatch stopcleaner : stopcleaner(C)

Dispatch engage  : engage(N)
Dispatch release : release(N)
Dispatch clean   : clean(N)

Request isClean : isClean(N)
Reply isCleanDone : isCleanDone(E)

Request isTableStopped : isTableStopped(T)
Reply isTableStoppedDone : isTableStoppedDone(E)

Dispatch gotohome : gotohome(G)

Dispatch gotoclean : gotoclean(G)
Dispatch gotoclean2 : gotoclean2(G)
Dispatch gotoclean3 : gotoclean3(G)

Dispatch gototable1 : gototable1(T)
Dispatch gototable2 : gototable2(T)


Context ctxbasicrobot     ip [host="localhost"   port=8020] 
Context ctxtearoom ip [ host="127.0.0.1" port=8068 ]
Context ctxtearoom_dummy   ip [host="localhost" port=8050]    

CodedQActor teatables context ctxtearoom_dummy className "it.unibo.teatables.Teatables"
CodedQActor waitercleaner context ctxtearoom_dummy className "it.unibo.waitercleaner.Waitercleaner"

ExternalQActor basicrobot  context ctxbasicrobot

CodedQActor waiterengine context ctxtearoom className "it.unibo.waiterengine.Waiterengine"

QActor waitermind context ctxtearoom{
[#
//	//Coordinates of the entrance door
	val X_Entrancedoor = "0"
	val Y_Entrancedoor = "4"

//	//Coordinates of the exit door
	val X_Exitdoor = "6"
	val Y_Exitdoor = "4"
	
//  //Coordinates of the barman
	val X_servicedesk = "6"
	val Y_servicedesk = "0"	

//	//Coordinates Tables
	val X_teatable1     = "2"
	val Y_teatable1     = "2"

	val X_teatable2     = "4"
	val Y_teatable2     = "2"

	//Coordinates of the home
    val X_home			= "0"
	val Y_home 			= "0"

	val	Cleantime = 3000L
	val Servicetime = 5000L
	val CollectTime = 4000L
	
#]
	State s0 initial {
		discardMsg Off
		println("waitermind   |||   init")
		request waiterengine -m start : start(id)
	}
	Transition t0 whenReply ready -> home
	
	State reachhome{
		println("waitermind   |||   reachhome")
		request waiterengine -m moveto : moveto($X_home,$Y_home)
	}
	Transition t0 whenReply done -> home
	
	State home{
		println("waitermind   |||   home")
		updateResource [# "home" #]
	}
	Transition t0 whenRequest enter -> accept
				  whenMsg clientready -> take
				  whenMsg drinkready -> reachBarman
				  whenMsg paymentready -> reachTableCollect
				  whenMsg end -> endwork
	
	State accept {
		println("waitermind   |||   accept")
		replyTo enter with accept : accept(idclient)
	}
	Goto reachEntranceDoor
	
	State reachEntranceDoor {
		println("waitermind   |||   reachEntranceDoor")
		//updateResource[# "reachEntranceDoor" #]
		request waiterengine -m moveto : moveto($X_Entrancedoor, $Y_Entrancedoor)
	}
	Transition t0 whenReply done -> checkTables
	
	State checkTables{
		println("waitermind   |||   checkTables")
		request teatables -m isClean : isClean(1)
	}
	Transition t0 whenReply isCleanDone -> checkIsCleanDone1
	
	State checkIsCleanDone1{
		onMsg(isCleanDone : isCleanDone(N)){
			if [# $payloadArg(0)=="yes" #]{
				forward waitermind -m gototable1 : gototable1(table1)
			}
			else{
				request teatables -m isClean : isClean(2)
			}
		}
	}
	Transition t0 whenMsg gototable1 -> convoyToTable1
				whenReply isCleanDone -> checkIsCleanDone2
	
	State checkIsCleanDone2{
		onMsg(isCleanDone : isCleanDone(N)){
			if [# $payloadArg(0)=="yes" #]{
				forward waitermind -m gototable2 : gototable2(table2)
			}
		}
	}
	Goto convoyToTable2
	
	State convoyToTable1{
		println("waitermind   |||   convoyToTable1")
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
//		[# table1.state= "occupied" #]
		forward teatables -m engage : engage(1)
		println("waitermind   |||   table1 state occupied")
		//updateResource [# "convoyToTable1" #]
		delay 5000
	}
	Transition t0 whenReply done -> checkCleanHome
	
	State convoyToTable2{
		println("waitermind   |||   convoyToTable2")
		request waiterengine -m moveto : moveto ($X_teatable2,$Y_teatable2)
		//[# table2.state= "occupied" #]
		forward teatables -m engage : engage(2)
		println("waitermind   |||   table2 state occupied")
		//updateResource [# "convoyToTable2" #]
		delay 5000
	}
	Transition t0 whenReply done -> checkCleanHome
	
	State checkCleanHome{
		println("waitermind   |||   checkClean")
		request waitercleaner -m isTableStopped : isTableStopped(isStopped)
	}
	Transition t0 whenReply isTableStoppedDone -> checkIsTableStopped
	

	State checkIsTableStopped{
		println("waitermind   |||   checkIsTableStopped")
		onMsg( isTableStoppedDone : isTableStoppedDone(E)){
			if [# $payloadArg(0)==0 #]{ //0 non è interrotto nessun clean
				forward waitermind -m gotohome : gotohome(go)
			}
			else{
				if[# $payloadArg(0)==1 #]{ //Interrotto clean table1
					forward waitermind -m gototable1 : gototable1(go)
				}
				else{
					//forward waitermind -m gototable2 : gototable2(go)
				}
			}
		}
	}
	Transition t0 whenMsg gotohome -> reachhome
				whenMsg gototable1 -> reachTable1CleanStopped
				//whenMsg gototable2 -> reachTable2CleanStopped per ora il modello associa al primo cliente sempre il table1, quindi non si verifica
	
	State reachTable1CleanStopped{
		println("waitermind   |||   reachTable1CleanStopped")
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> cleanTable1
	
	State take{
		println("waitermind   |||   take")
		updateResource [# "take" #]
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> transmit
	
	State transmit{
		println("waitermind   |||   transmit")
		updateResource [# "transmit" #]
		//forward barman -m order : order(payloadArg(0))
	}
	Goto reachhome
	
	State reachBarman{
		println("waitermind   |||   reachBarman")
		updateResource[# "reachBarman" #]
		request waiterengine -m moveto: moveto($X_servicedesk,$Y_servicedesk)
	}
	Transition t0 whenReply done -> serve
	
	State serve{
		println("waitermind   |||   serve")
		updateResource[# "serve" #]
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> reachhome
	
	State reachTableCollect {
		println("waitermind   |||   reachTable")
		updateResource[# "reachTable" #]
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> collect
	
	State reachTableClean {
		println("waitermind   |||   reachTable")
		updateResource[# "reachTable" #]
		request waiterengine -m moveto : moveto ($X_teatable1,$Y_teatable1)
	}
	Transition t0 whenReply done -> cleanTable1
	
	State collect {
		println("waitermind   |||   collect")
		updateResource[# "collect" #]
		delayVar CollectTime
	}
	Goto convoyToExitDoor
	
	State convoyToExitDoor{
		println("waitermind   |||   convoyToExitDoor")
		updateResource[# "convoyToExitDoor" #]
		request waiterengine -m moveto : moveto($X_Exitdoor,$Y_Exitdoor)
		[# table1.state = "dirty" #]
		println("waitermind   |||   table state dirty")
		delay 5000
	}
	Transition t0 whenReply done -> reachTableClean
	
	State cleanTable1{
		println("waitermind   |||   cleanTable1")
		forward waitercleaner -m startcleaner : startcleaner(1)
	}
	Transition t0 whenMsg cleanerdone -> reachhome //Qua non posso ricevere altri messaggi per l'assunzione fatta
	
	State cleanTable2{
		println("waitermind   |||   cleanTable2")
		forward waitercleaner -m startcleaner : startcleaner(2)
	}
	Transition t0 whenMsg cleanerdone -> reachhome
					whenRequest enter -> handleEnter
	
	State handleEnter {
		forward waitercleaner -m stopcleaner : stopcleaner(stop) 
	}
	Goto accept
	
	State endwork{
		println("waitermind   |||   end")
		terminate 0
	}
}


//QActor client context ctxtearoom {
//	State s0 initial{
//		println("client   |||   init")
//	}
//	Goto doSomething
//	
//	State doSomething{
//		println("client   |||   sending enter request")
//		request waitermind -m enter : enter(id)
//	}
//	Transition t0 whenReply accept -> ok
//	
//	State ok{
//		println("client   |||   accepted")
//		delay 15000
//		println("client   |||   ready")
//		forward waitermind -m clientready : clientready(id)
//		delay 15000
//		println("barman   |||   ready")
//		forward waitermind -m drinkready : drinkready(id)
//		delay 15000
//		forward waitermind -m paymentready : paymentready(id)
//		delay 10000
//		request waitermind -m enter : enter(id)
//		delay 20000
//		forward waitermind -m end : end(end)
//	}
//}