System   tearoomsubsys


Dispatch engage  : engage(N)
Dispatch release : release(N)
Dispatch clean   : clean(N)

Request isClean : isClean(N)
Reply isCleanDone : isCleanDone(E)


Context ctxtearoom_dummy   ip [host="localhost" port=8050]    

QActor teatables context ctxtearoom_dummy{ 
[#
	var StateOfTables = ""
#]	
	State s0 initial{
		println("teatables START")
		solve( consult("tearoomkb.pl")	 )
	}
	Goto work
	
	State work{
		solve( stateOfTeatables(S) )
		ifSolved { [# StateOfTables = getCurSol("S").toString() #] }
		println("teatables s0: $StateOfTables")
		updateResource [# StateOfTables #]
	}
	Transition t0  whenMsg engage -> engageTable
					whenMsg clean -> cleanTable
					whenRequest isClean -> replyClean
					
	State replyClean {
		
	}
					
	State engageTable{
		printCurrentMessage
		onMsg( engage : engage(N) ){
			println("engageTable ${payloadArg(0)}")
			solve( engageTable( $payloadArg(0) ) )	//could do anything
			solve( stateOfTeatables(S) )
			[# StateOfTables = getCurSol("S").toString() #]  
			println("teatables engageTable ${payloadArg(0)}: $StateOfTables")
			updateResource [# StateOfTables #]
		}
	}
	Goto work

	State cleanTable{
		printCurrentMessage
		onMsg( clean : clean(N) ){
			println("clean ${payloadArg(0)}")
			solve( cleanTable( $payloadArg(0) ) )	//could do anything
			solve( stateOfTeatables(S) )
			[# StateOfTables = getCurSol("S").toString() #]  
			println("teatables cleanTable ${payloadArg(0)}: $StateOfTables")
			updateResource [# StateOfTables #] 			 
		}
	}
	Goto work
	
}