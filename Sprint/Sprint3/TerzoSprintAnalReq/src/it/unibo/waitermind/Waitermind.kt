/* Generated by AN DISI Unibo */ 
package it.unibo.waitermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waitermind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		//	//Coordinates of the entrance door
			val X_Entrancedoor = "0"
			val Y_Entrancedoor = "4"
		
		//	//Coordinates of the exit door
			val X_Exitdoor = "6"
			val Y_Exitdoor = "4"
			
		//  //Coordinates of the barman
			val X_servicedesk = "6"
			val Y_servicedesk = "0"	
		
		//	//Coordinates Tables
			val X_teatable1     = "2"
			val Y_teatable1     = "2"
		
			val X_teatable2     = "4"
			val Y_teatable2     = "2"
		
			//Coordinates of the home
		    val X_home			= "0"
			val Y_home 			= "0"
		
			val Servicetime = 3000L
			val CollectTime = 3000L
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
						println("waitermind   |||   init")
						request("start", "start(id)" ,"waiterengine" )  
					}
					 transition(edgeName="t00",targetState="home",cond=whenReply("ready"))
				}	 
				state("reachhome") { //this:State
					action { //it:State
						println("waitermind   |||   reachhome")
						forward("moveto", "moveto($X_home,$Y_home)" ,"waiterengine" ) 
					}
					 transition(edgeName="t01",targetState="home",cond=whenDispatch("done"))
					transition(edgeName="t02",targetState="accept",cond=whenRequest("enter"))
					transition(edgeName="t03",targetState="take",cond=whenDispatch("clientready"))
					transition(edgeName="t04",targetState="reachBarman",cond=whenDispatch("drinkready"))
					transition(edgeName="t05",targetState="reachTableCollect",cond=whenDispatch("paymentready"))
				}	 
				state("home") { //this:State
					action { //it:State
						println("waitermind   |||   home")
						updateResourceRep( "home"  
						)
					}
					 transition(edgeName="t06",targetState="accept",cond=whenRequest("enter"))
					transition(edgeName="t07",targetState="take",cond=whenDispatch("clientready"))
					transition(edgeName="t08",targetState="reachBarman",cond=whenDispatch("drinkready"))
					transition(edgeName="t09",targetState="reachTableCollect",cond=whenDispatch("paymentready"))
					transition(edgeName="t010",targetState="endwork",cond=whenDispatch("end"))
				}	 
				state("accept") { //this:State
					action { //it:State
						forward("stopengine", "stopengine(stop)" ,"waiterengine" ) 
						println("waitermind   |||   accept")
						answer("enter", "accept", "accept(idclient)"   )  
					}
					 transition( edgeName="goto",targetState="reachEntranceDoor", cond=doswitch() )
				}	 
				state("reachEntranceDoor") { //this:State
					action { //it:State
						updateResourceRep( "reachingEntranceDoor"  
						)
						println("waitermind   |||   reachEntranceDoor")
						forward("moveto", "moveto($X_Entrancedoor,$Y_Entrancedoor)" ,"waiterengine" ) 
					}
					 transition(edgeName="t011",targetState="checkTables",cond=whenDispatch("done"))
				}	 
				state("checkTables") { //this:State
					action { //it:State
						println("waitermind   |||   checkTables")
						request("isClean", "isClean(1)" ,"teatables" )  
					}
					 transition(edgeName="t012",targetState="checkIsCleanDone1",cond=whenReply("isCleanDone"))
				}	 
				state("checkIsCleanDone1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("isCleanDone(N,E)"), Term.createTerm("isCleanDone(N,E)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(1)=="yes"  
								 ){forward("gototable1", "gototable1(table1)" ,"waitermind" ) 
								}
								else
								 {request("isClean", "isClean(2)" ,"teatables" )  
								 }
						}
						 readLine()  
					}
					 transition(edgeName="t013",targetState="convoyToTable1",cond=whenDispatch("gototable1"))
					transition(edgeName="t014",targetState="checkIsCleanDone2",cond=whenReply("isCleanDone"))
				}	 
				state("checkIsCleanDone2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("isCleanDone(N,E)"), Term.createTerm("isCleanDone(N,E)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(1)=="yes"  
								 ){forward("gototable2", "gototable2(table2)" ,"waitermind" ) 
								}
						}
					}
					 transition( edgeName="goto",targetState="convoyToTable2", cond=doswitch() )
				}	 
				state("convoyToTable1") { //this:State
					action { //it:State
						updateResourceRep( "convoyToTable1"  
						)
						println("waitermind   |||   convoyToTable1")
						forward("moveto", "moveto($X_teatable1,$Y_teatable1)" ,"waiterengine" ) 
						forward("occupy", "occupy(1)" ,"teatables" ) 
						println("waitermind   |||   table1 state occupied")
						delay(5000) 
					}
					 transition(edgeName="t015",targetState="checkCleanHome",cond=whenDispatch("done"))
				}	 
				state("convoyToTable2") { //this:State
					action { //it:State
						updateResourceRep( "convoyToTable2"  
						)
						println("waitermind   |||   convoyToTable2")
						forward("moveto", "moveto($X_teatable2,$Y_teatable2)" ,"waiterengine" ) 
						forward("occupy", "occupy(2)" ,"teatables" ) 
						println("waitermind   |||   table2 state occupied")
						delay(5000) 
					}
					 transition(edgeName="t016",targetState="checkCleanHome",cond=whenDispatch("done"))
				}	 
				state("checkCleanHome") { //this:State
					action { //it:State
						 readLine()  
						println("waitermind   |||   checkClean")
						request("isTableStopped", "isTableStopped(isStopped)" ,"waitercleaner" )  
					}
					 transition(edgeName="t017",targetState="checkIsTableStopped",cond=whenReply("isTableStoppedDone"))
				}	 
				state("checkIsTableStopped") { //this:State
					action { //it:State
						println("waitermind   |||   checkIsTableStopped")
						if( checkMsgContent( Term.createTerm("isTableStoppedDone(E)"), Term.createTerm("isTableStoppedDone(E)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(0)=="0"  
								 ){forward("gotohome", "gotohome(go)" ,"waitermind" ) 
								}
								else
								 {if(  payloadArg(0)=="1"  
								  ){forward("gototable1", "gototable1(go)" ,"waitermind" ) 
								 }
								 }
						}
					}
					 transition(edgeName="t018",targetState="reachhome",cond=whenDispatch("gotohome"))
					transition(edgeName="t019",targetState="reachTable1CleanStopped",cond=whenDispatch("gototable1"))
				}	 
				state("reachTable1CleanStopped") { //this:State
					action { //it:State
						println("waitermind   |||   reachTable1CleanStopped")
						forward("moveto", "moveto($X_teatable1,$Y_teatable1)" ,"waiterengine" ) 
					}
					 transition(edgeName="t020",targetState="cleanTable1",cond=whenDispatch("done"))
				}	 
				state("take") { //this:State
					action { //it:State
						forward("stopengine", "stopengine(stop)" ,"waiterengine" ) 
						println("waitermind   |||   take")
						updateResourceRep( "take"  
						)
						forward("moveto", "moveto($X_teatable1,$Y_teatable1)" ,"waiterengine" ) 
					}
					 transition(edgeName="t021",targetState="transmit",cond=whenDispatch("done"))
				}	 
				state("transmit") { //this:State
					action { //it:State
						 readLine()  
						println("waitermind   |||   transmit")
						updateResourceRep( "transmit"  
						)
					}
					 transition( edgeName="goto",targetState="reachhome", cond=doswitch() )
				}	 
				state("reachBarman") { //this:State
					action { //it:State
						forward("stopengine", "stopengine(stop)" ,"waiterengine" ) 
						updateResourceRep( "reachingBarman"  
						)
						println("waitermind   |||   reachBarman")
						updateResourceRep( "reachBarman"  
						)
						forward("moveto", "moveto($X_servicedesk,$Y_servicedesk)" ,"waiterengine" ) 
					}
					 transition(edgeName="t022",targetState="serve",cond=whenDispatch("done"))
				}	 
				state("serve") { //this:State
					action { //it:State
						 readLine()  
						println("waitermind   |||   serve")
						updateResourceRep( "reachBarman"  
						)
						forward("moveto", "moveto($X_teatable1,$Y_teatable1)" ,"waiterengine" ) 
					}
					 transition(edgeName="t023",targetState="reachhome",cond=whenDispatch("done"))
				}	 
				state("reachTableCollect") { //this:State
					action { //it:State
						forward("stopengine", "stopengine(stop)" ,"waiterengine" ) 
						println("waitermind   |||   reachTable")
						updateResourceRep( "reachTable1"  
						)
						forward("moveto", "moveto($X_teatable1,$Y_teatable1)" ,"waiterengine" ) 
					}
					 transition(edgeName="t024",targetState="collect",cond=whenDispatch("done"))
				}	 
				state("reachTableClean") { //this:State
					action { //it:State
						 readLine()  
						println("waitermind   |||   reachTable")
						updateResourceRep( "reachTable1Clean"  
						)
						forward("moveto", "moveto($X_teatable1,$Y_teatable1)" ,"waiterengine" ) 
					}
					 transition(edgeName="t025",targetState="cleanTable1",cond=whenDispatch("done"))
				}	 
				state("collect") { //this:State
					action { //it:State
						 readLine()  
						println("waitermind   |||   collect")
						updateResourceRep( "collect"  
						)
						delay(CollectTime)
					}
					 transition( edgeName="goto",targetState="convoyToExitDoor", cond=doswitch() )
				}	 
				state("convoyToExitDoor") { //this:State
					action { //it:State
						println("waitermind   |||   convoyToExitDoor")
						updateResourceRep( "convoyToExitDoor"  
						)
						forward("moveto", "moveto($X_Exitdoor,$Y_Exitdoor)" ,"waiterengine" ) 
						forward("release", "release(1)" ,"teatables" ) 
						delay(5000) 
					}
					 transition(edgeName="t026",targetState="reachTableClean",cond=whenDispatch("done"))
				}	 
				state("cleanTable1") { //this:State
					action { //it:State
						updateResourceRep( "cleanTable1"  
						)
						println("waitermind   |||   cleanTable1")
						forward("startcleaner", "startcleaner(1)" ,"waitercleaner" ) 
					}
					 transition(edgeName="t027",targetState="reachhome",cond=whenDispatch("cleanerdone"))
					transition(edgeName="t028",targetState="handleEnter",cond=whenRequest("enter"))
				}	 
				state("cleanTable2") { //this:State
					action { //it:State
						updateResourceRep( "cleanTable2"  
						)
						println("waitermind   |||   cleanTable2")
						forward("startcleaner", "startcleaner(2)" ,"waitercleaner" ) 
					}
					 transition(edgeName="t029",targetState="reachhome",cond=whenDispatch("cleanerdone"))
				}	 
				state("handleEnter") { //this:State
					action { //it:State
						forward("stopcleaner", "stopcleaner(stop)" ,"waitercleaner" ) 
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
				state("endwork") { //this:State
					action { //it:State
						println("waitermind   |||   end")
						terminate(0)
					}
				}	 
			}
		}
}
