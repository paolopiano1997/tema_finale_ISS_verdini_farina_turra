/* Generated by AN DISI Unibo */ 
package it.unibo.teatables

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Teatables ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var StateOfTables = ""
			var E = ""
			var Table = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("teatables START")
						solve("consult('tearoomkb.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						solve("stateOfTeatables(S)","") //set resVar	
						if( currentSolution.isSuccess() ) { StateOfTables = getCurSol("S").toString()  
						}
						else
						{}
						println("teatables s0: $StateOfTables")
						updateResourceRep( StateOfTables  
						)
					}
					 transition(edgeName="t050",targetState="engageTable",cond=whenDispatch("occupy"))
					transition(edgeName="t051",targetState="cleanTable",cond=whenDispatch("clean"))
					transition(edgeName="t052",targetState="getTable",cond=whenRequest("getTable"))
					transition(edgeName="t053",targetState="tableClean",cond=whenRequest("tableClean"))
					transition(edgeName="t054",targetState="release",cond=whenDispatch("release"))
					transition(edgeName="t055",targetState="replyClean",cond=whenRequest("isClean"))
					transition(edgeName="t056",targetState="setState",cond=whenDispatch("setTableState"))
					transition(edgeName="t057",targetState="tableState",cond=whenRequest("tableState"))
				}	 
				state("getTable") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("getTable(ID)"), Term.createTerm("getTable(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("getState(N,occupy(${payloadArg(0)}))","") //set resVar	
								if( currentSolution.isSuccess() ) { Table = getCurSol("N").toString()  
								answer("getTable", "tableId", "tableId($Table)"   )  
								}
								else
								{}
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("tableClean") { //this:State
					action { //it:State
						solve("tableclean(N)","") //set resVar	
						if( currentSolution.isSuccess() ) { Table = getCurSol("N").toString()  
						answer("tableClean", "table", "table($Table)"   )  
						}
						else
						{answer("tableClean", "table", "table(0)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("release") { //this:State
					action { //it:State
						updateResourceRep( "clean"  
						)
						println("teatables   |||   release")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("release(N)"), Term.createTerm("release(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("releaseTable(${payloadArg(0)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("tableState") { //this:State
					action { //it:State
						println("teateables   |||   tableState")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("tableState(N)"), Term.createTerm("tableState(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Table = payloadArg(0)  
								solve("getState($Table,S)","") //set resVar	
								if( currentSolution.isSuccess() ) { E = getCurSol("S").toString()  
								}
								else
								{}
								answer("tableState", "state", "state($Table,$E)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("setState") { //this:State
					action { //it:State
						println("teatables   |||   setState")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("setTableState(N,S)"), Term.createTerm("setTableState(N,S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "${payloadArg(1)}"  
								)
								solve("setState(${payloadArg(0)},${payloadArg(1)})","") //set resVar	
								if( currentSolution.isSuccess() ) {solve("getState(${payloadArg(0)},S)","") //set resVar	
								if( currentSolution.isSuccess() ) {
														println(getCurSol("S").toString())
								}
								else
								{}
								}
								else
								{}
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("replyClean") { //this:State
					action { //it:State
						println("teatables   |||   replyClean")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("isClean(N)"), Term.createTerm("isClean(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Table = payloadArg(0)  
								println("onMsg isClean")
								solve("getState($Table,S)","") //set resVar	
								if( currentSolution.isSuccess() ) { 
													E = getCurSol("S").toString()
													if(E == "clean")
														E = "yes"
													else
														E = "no"
								}
								else
								{}
								answer("isClean", "isCleanDone", "isCleanDone($Table,$E)"   )  
								println("replyTo isClean $E")
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("engageTable") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("occupy(N,ID)"), Term.createTerm("occupy(N,ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "occupy"  
								)
								println("engageTable ${payloadArg(0)}, ${payloadArg(1)}")
								solve("occupyTable(${payloadArg(0)},${payloadArg(1)})","") //set resVar	
								solve("stateOfTeatables(S)","") //set resVar	
								 StateOfTables = getCurSol("S").toString()  
								println("teatables engageTable ${payloadArg(0)}: $StateOfTables")
								updateResourceRep( StateOfTables  
								)
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("cleanTable") { //this:State
					action { //it:State
						updateResourceRep( "clean"  
						)
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("clean(N)"), Term.createTerm("clean(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("clean ${payloadArg(0)}")
								solve("cleanTable(${payloadArg(0)})","") //set resVar	
								solve("stateOfTeatables(S)","") //set resVar	
								 StateOfTables = getCurSol("S").toString()  
								println("teatables cleanTable ${payloadArg(0)}: $StateOfTables")
								updateResourceRep( StateOfTables  
								)
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
