/* Generated by AN DISI Unibo */ 
package it.unibo.waitermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waitermind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			val CollectTime = 3000L
		
			//Posizione corrente da raggiungere
			var CurMoveX = 0
			var CurMoveY = 0
		
			//ID corrente del cliente
			var CurCID = 0
		
			//Table corrente e table da pulire corrente
			var CurTable = 0
			var CurTableClean = 0
		
			//Se un cliente suona e non ci sono posti, lo salviamo qua
			var CurEnterCID = 0
		
			//Ordine corrente
			var CurOrder = ""
			
			//Tempo rimanente minimo clienti
			var RemCTime = 15 //Secondi
			
			//State
			var WState = ""
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
						solve("consult('tearoomkb.pl')","") //set resVar	
						println("waitermind   |||   init")
						request("start", "start(id)" ,"waiterengine" )  
					}
					 transition(edgeName="t00",targetState="home",cond=whenReply("ready"))
				}	 
				state("reachhome") { //this:State
					action { //it:State
						println("waitermind   |||   reachhome")
						solve("pos(home,X,Y)","") //set resVar	
						forward("setWaiterState", "setWaiterState(reachHome)" ,"tearoomstate" ) 
						if( currentSolution.isSuccess() ) { 
									   CurMoveX = getCurSol("X").toString().toInt()  
						 			   CurMoveY = getCurSol("Y").toString().toInt()  
						forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t01",targetState="home",cond=whenDispatch("done"))
					transition(edgeName="t02",targetState="accept",cond=whenRequest("enter"))
					transition(edgeName="t03",targetState="reachTableCollect",cond=whenDispatch("timePassed"))
					transition(edgeName="t04",targetState="take",cond=whenDispatch("clientready"))
					transition(edgeName="t05",targetState="reachBarman",cond=whenDispatch("drinkready"))
					transition(edgeName="t06",targetState="reachTableCollect",cond=whenDispatch("paymentready"))
				}	 
				state("home") { //this:State
					action { //it:State
						println("waitermind   |||   home")
						forward("setWaiterState", "setWaiterState(home)" ,"tearoomstate" ) 
						updateResourceRep( "home"  
						)
					}
					 transition(edgeName="t07",targetState="accept",cond=whenRequest("enter"))
					transition(edgeName="t08",targetState="take",cond=whenDispatch("clientready"))
					transition(edgeName="t09",targetState="timeEndTable",cond=whenDispatch("timePassed"))
					transition(edgeName="t010",targetState="reachBarman",cond=whenDispatch("drinkready"))
					transition(edgeName="t011",targetState="reachTableCollect",cond=whenDispatch("paymentready"))
					transition(edgeName="t012",targetState="endwork",cond=whenDispatch("end"))
				}	 
				state("accept") { //this:State
					action { //it:State
						println("waitermind   |||   accept")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("enter(ID)"), Term.createTerm("enter(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurCID = payloadArg(0).toString().toInt()  
								request("tableClean", "tableClean(n)" ,"tearoomstate" )  
						}
					}
					 transition(edgeName="t013",targetState="checkTables",cond=whenReply("table"))
				}	 
				state("checkTables") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("waitermind   |||   checkTables")
						if( checkMsgContent( Term.createTerm("table(N)"), Term.createTerm("table(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurTable = payloadArg(0).toString().toInt()  
						}
						if(  CurTable != 0  
						 ){forward("stopengine", "stopengine(stop)" ,"waiterengine" ) 
						forward("stopcleaner", "stopcleaner(stop)" ,"waitercleaner" ) 
						delay(400) 
						println("waitermind   |||   tableclean=$CurTable")
						answer("enter", "accept", "accept($CurTable)"   )  
						forward("occupy", "occupy($CurTable,$CurCID)" ,"tearoomstate" ) 
						}
						else
						 {println("waitermind   |||   accept failed, $CurCID")
						 request("getRemainingTime", "getRemainingTime(time)" ,"maxstaytimer" )  
						  CurEnterCID = CurCID  
						  CurCID = 0  
						 }
					}
					 transition( edgeName="goto",targetState="reachEntranceDoor", cond=doswitchGuarded({ CurCID != 0  
					}) )
					transition( edgeName="goto",targetState="checkInform", cond=doswitchGuarded({! ( CurCID != 0  
					) }) )
				}	 
				state("checkInform") { //this:State
					action { //it:State
						println("waitermind   |||   checkInform")
					}
					 transition(edgeName="t014",targetState="inform",cond=whenReply("remainingTime"))
				}	 
				state("inform") { //this:State
					action { //it:State
						println("waitermind   |||   inform")
						updateResourceRep( "inform"  
						)
						if( checkMsgContent( Term.createTerm("remainingTime(T)"), Term.createTerm("remainingTime(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 RemCTime = payloadArg(0).toString().toInt()  
								answer("enter", "inform", "inform($RemCTime)"   )  
						}
						delay(5000) 
					}
					 transition( edgeName="goto",targetState="checkCleanHome", cond=doswitch() )
				}	 
				state("reachEntranceDoor") { //this:State
					action { //it:State
						forward("setWaiterState", "setWaiterState(reachEntranceDoor)" ,"tearoomstate" ) 
						updateResourceRep( "reachingEntranceDoor"  
						)
						println("waitermind   |||   reachEntranceDoor")
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("pos(entrancedoor,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { 
									   CurMoveX = getCurSol("X").toString().toInt()  
						 			   CurMoveY = getCurSol("Y").toString().toInt()  
						forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t015",targetState="convoyToTable",cond=whenDispatch("done"))
				}	 
				state("convoyToTable") { //this:State
					action { //it:State
						updateResourceRep( "convoyToTable$CurTable"  
						)
						 WState = "convoyToTable$CurTable"  
						forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
						println("waitermind   |||   convoyToTable$CurTable")
						solve("pos('teatable$CurTable',X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { 
									   CurMoveX = getCurSol("X").toString().toInt()  
						 			   CurMoveY = getCurSol("Y").toString().toInt()  
						forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
						forward("occupy", "occupy($CurTable)" ,"tearoomstate" ) 
						forward("doTimerAction", "doTimerAction($CurTable,start)" ,"maxstaytimer" ) 
						}
						else
						{}
						println("waitermind   |||   table1 state occupied")
					}
					 transition(edgeName="t016",targetState="checkCleanHome",cond=whenDispatch("done"))
				}	 
				state("checkCleanHome") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("waitermind   |||   checkClean")
						request("isTableStopped", "isTableStopped(isStopped)" ,"waitercleaner" )  
					}
					 transition(edgeName="t017",targetState="checkIsTableStopped",cond=whenReply("isTableStoppedDone"))
				}	 
				state("checkIsTableStopped") { //this:State
					action { //it:State
						println("waitermind   |||   checkIsTableStopped")
						if( checkMsgContent( Term.createTerm("isTableStoppedDone(E)"), Term.createTerm("isTableStoppedDone(E)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(0)=="0"  
								 ){forward("gotohome", "gotohome(go)" ,"waitermind" ) 
								 CurTableClean = 0  
								}
								else
								 {if(  payloadArg(0)=="1"  
								  ){ CurTableClean = 1  
								 }
								 else
								  { CurTableClean = 2  
								  }
								 }
						}
						stateTimer = TimerActor("timer_checkIsTableStopped", 
							scope, context!!, "local_tout_waitermind_checkIsTableStopped", 200.toLong() )
					}
					 transition(edgeName="t018",targetState="reachTableCleanStopped",cond=whenTimeout("local_tout_waitermind_checkIsTableStopped"))   
					transition(edgeName="t019",targetState="reachhome",cond=whenDispatch("gotohome"))
				}	 
				state("reachTableCleanStopped") { //this:State
					action { //it:State
						println("waitermind   |||   reachTableCleanStopped")
						solve("pos('teatable$CurTableClean',X,Y)","") //set resVar	
						 WState = "reachTableCleanStopped$CurTableClean"  
						forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
						if( currentSolution.isSuccess() ) {
									   CurMoveX = getCurSol("X").toString().toInt()
						 			   CurMoveY = getCurSol("Y").toString().toInt()
						forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t020",targetState="cleanTable",cond=whenDispatch("done"))
				}	 
				state("take") { //this:State
					action { //it:State
						forward("stopengine", "stopengine(stop)" ,"waiterengine" ) 
						forward("stopcleaner", "stopcleaner(stop)" ,"waitercleaner" ) 
						delay(400) 
						println("waitermind   |||   take")
						updateResourceRep( "take"  
						)
						if( checkMsgContent( Term.createTerm("clientready(ID)"), Term.createTerm("clientready(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurCID = payloadArg(0).toString().toInt()
						}
						request("getTable", "getTable($CurCID)" ,"tearoomstate" )  
					}
					 transition(edgeName="t021",targetState="checkTake",cond=whenReply("tableId"))
				}	 
				state("checkTake") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tableId(N)"), Term.createTerm("tableId(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurTable = payloadArg(0).toString().toInt()  
								 WState = "reachTableTake$CurTable"  
								forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
								forward("doTimerAction", "doTimerAction($CurTable,stop)" ,"maxstaytimer" ) 
								solve("pos('teatable$CurTable',X,Y)","") //set resVar	
								if( currentSolution.isSuccess() ) { 
												   CurMoveX = getCurSol("X").toString().toInt()  
									 			   CurMoveY = getCurSol("Y").toString().toInt()  
								forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
								}
								else
								{}
						}
					}
					 transition(edgeName="t022",targetState="waitOrder",cond=whenDispatch("done"))
				}	 
				state("waitOrder") { //this:State
					action { //it:State
						 WState = "waitOrderTable$CurTable"  
						updateResourceRep( "waitOrderTable$CurTable"  
						)
						forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
						println("waitermind   |||   waitOrder")
					}
					 transition(edgeName="t023",targetState="transmit",cond=whenDispatch("order"))
				}	 
				state("transmit") { //this:State
					action { //it:State
						println("waitermind   |||   transmit")
						updateResourceRep( "transmit"  
						)
						if( checkMsgContent( Term.createTerm("order(ID,O)"), Term.createTerm("order(ID,O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 WState = "transmitOrder${payloadArg(1)}Client$CurCID"  
								forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
								forward("order", "order($CurCID,${payloadArg(1)})" ,"barman" ) 
						}
					}
					 transition( edgeName="goto",targetState="checkCleanHome", cond=doswitch() )
				}	 
				state("reachBarman") { //this:State
					action { //it:State
						forward("stopengine", "stopengine(stop)" ,"waiterengine" ) 
						forward("stopcleaner", "stopcleaner(stop)" ,"waitercleaner" ) 
						forward("setWaiterState", "setWaiterState(reachBarman)" ,"tearoomstate" ) 
						delay(400) 
						updateResourceRep( "reachBarman"  
						)
						println("waitermind   |||   reachBarman")
						if( checkMsgContent( Term.createTerm("drinkready(ID,O)"), Term.createTerm("drinkready(ID,O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurCID = payloadArg(0).toString().toInt()  
						}
						solve("pos(barman,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { 
									   CurMoveX = getCurSol("X").toString().toInt()  
						 			   CurMoveY = getCurSol("Y").toString().toInt()  
						forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t024",targetState="serve",cond=whenDispatch("done"))
				}	 
				state("serve") { //this:State
					action { //it:State
						forward("take", "take(take)" ,"barman" ) 
						println("waitermind   |||   serve")
						request("getTable", "getTable($CurCID)" ,"tearoomstate" )  
					}
					 transition(edgeName="t025",targetState="checkTableId",cond=whenReply("tableId"))
				}	 
				state("checkTableId") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tableId(N)"), Term.createTerm("tableId(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurTable = payloadArg(0).toString().toInt()  
								 WState = "reachTableServe$CurTable"  
								forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
								forward("doTimerAction", "doTimerAction($CurTable,start)" ,"maxstaytimer" ) 
								solve("pos('teatable$CurTable',X,Y)","") //set resVar	
								if( currentSolution.isSuccess() ) { 
												   CurMoveX = getCurSol("X").toString().toInt()  
									 			   CurMoveY = getCurSol("Y").toString().toInt()  
								forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
								}
								else
								{}
						}
					}
					 transition(edgeName="t026",targetState="checkCleanHome",cond=whenDispatch("done"))
				}	 
				state("timeEndTable") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("timePassed(N)"), Term.createTerm("timePassed(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurTable = payloadArg(0).toString().toInt()  
								 WState = "endMaxStayTimeTable$CurTable"  
								forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
								delay(3000) 
						}
					}
					 transition( edgeName="goto",targetState="checkCollect", cond=doswitch() )
				}	 
				state("reachTableCollect") { //this:State
					action { //it:State
						forward("stopengine", "stopengine(stop)" ,"waiterengine" ) 
						forward("stopcleaner", "stopcleaner(stop)" ,"waitercleaner" ) 
						delay(400) 
						println("waitermind   |||   reachTableCollect")
						if( checkMsgContent( Term.createTerm("paymentready(ID)"), Term.createTerm("paymentready(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurCID = payloadArg(0).toString().toInt()  
						}
						request("getTable", "getTable($CurCID)" ,"tearoomstate" )  
					}
					 transition(edgeName="t027",targetState="checkCollect",cond=whenReply("tableId"))
				}	 
				state("checkCollect") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tableId(N)"), Term.createTerm("tableId(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if( currentSolution.isSuccess() ) { CurTable = payloadArg(0).toString().toInt()  
								 WState = "reachTableCollect$CurTable"  
								forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
								}
								else
								{}
						}
						forward("doTimerAction", "doTimerAction($CurTable,end)" ,"maxstaytimer" ) 
						updateResourceRep( "reachTable$CurTable"  
						)
						solve("pos('teatable$CurTable',X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {
									   CurMoveX = getCurSol("X").toString().toInt()  
						 			   CurMoveY = getCurSol("Y").toString().toInt()  
						forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t028",targetState="collect",cond=whenDispatch("done"))
				}	 
				state("reachTableClean") { //this:State
					action { //it:State
						println("waitermind   |||   reachTable")
						updateResourceRep( "reachTableClean"  
						)
						 CurTableClean = CurTable  
						 WState = "reachTableClean$CurTableClean"  
						forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
						solve("pos('teatable$CurTable',X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { 
									   CurMoveX = getCurSol("X").toString().toInt()  
						 			   CurMoveY = getCurSol("Y").toString().toInt()  
						forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t029",targetState="cleanTable",cond=whenDispatch("done"))
				}	 
				state("collect") { //this:State
					action { //it:State
						println("waitermind   |||   collect")
						forward("setWaiterState", "setWaiterState(collect)" ,"tearoomstate" ) 
						updateResourceRep( "collect"  
						)
						delay(CollectTime)
					}
					 transition( edgeName="goto",targetState="convoyToExitDoor", cond=doswitch() )
				}	 
				state("convoyToExitDoor") { //this:State
					action { //it:State
						println("waitermind   |||   convoyToExitDoor")
						updateResourceRep( "convoyToExitDoor"  
						)
						forward("setWaiterState", "setWaiterState(convoyToExitDoor)" ,"tearoomstate" ) 
						forward("setTableState", "setTableState($CurTable,dirty)" ,"tearoomstate" ) 
						 CurCID = 0  
						solve("pos(exitdoor,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {
									   CurMoveX = getCurSol("X").toString().toInt()  
						 			   CurMoveY = getCurSol("Y").toString().toInt()  
						forward("moveto", "moveto($CurMoveX,$CurMoveY)" ,"waiterengine" ) 
						}
						else
						{}
						forward("release", "release($CurTable)" ,"tearoomstate" ) 
					}
					 transition(edgeName="t030",targetState="reachTableClean",cond=whenDispatch("done"))
				}	 
				state("cleanTable") { //this:State
					action { //it:State
						updateResourceRep( "cleanTable$CurTableClean"  
						)
						 WState = "cleanTable$CurTableClean"  
						forward("setWaiterState", "setWaiterState($WState)" ,"tearoomstate" ) 
						println("waitermind   |||   cleanTable$CurTableClean")
						forward("startcleaner", "startcleaner($CurTableClean)" ,"waitercleaner" ) 
					}
					 transition(edgeName="t031",targetState="checkQueue",cond=whenDispatch("cleanerdone"))
					transition(edgeName="t032",targetState="accept",cond=whenRequest("enter"))
					transition(edgeName="t033",targetState="take",cond=whenDispatch("clientready"))
					transition(edgeName="t034",targetState="reachTableCollect",cond=whenDispatch("timePassed"))
					transition(edgeName="t035",targetState="reachBarman",cond=whenDispatch("drinkready"))
					transition(edgeName="t036",targetState="reachTableCollect",cond=whenDispatch("paymentready"))
				}	 
				state("checkQueue") { //this:State
					action { //it:State
						println("waitermind   |||   checkQueue")
						if(  CurEnterCID != 0  
						 ){ 
										CurCID = CurEnterCID
										CurEnterCID = 0
						request("tableClean", "tableClean(n)" ,"tearoomstate" )  
						}
						else
						 {forward("gotohome", "gotohome(go)" ,"waitermind" ) 
						 }
					}
					 transition(edgeName="t037",targetState="checkTables",cond=whenReply("table"))
					transition(edgeName="t038",targetState="reachhome",cond=whenDispatch("gotohome"))
				}	 
				state("endwork") { //this:State
					action { //it:State
						println("waitermind   |||   end")
						terminate(0)
					}
				}	 
			}
		}
}
