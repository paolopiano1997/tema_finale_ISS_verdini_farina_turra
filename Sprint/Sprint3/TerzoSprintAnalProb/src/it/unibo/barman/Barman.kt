/* Generated by AN DISI Unibo */ 
package it.unibo.barman

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Barman ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				val Servicetime = 3000L
				var CurOrder = ""
				var CurCID = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("barman   |||   init")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("barman   |||   wait")
						forward("setBarmanState", "setBarmanState(idle)" ,"tearoomstate" ) 
						updateResourceRep( "waiting"  
						)
					}
					 transition(edgeName="t078",targetState="prepare",cond=whenDispatch("order"))
				}	 
				state("prepare") { //this:State
					action { //it:State
						println("barman   |||   prepare")
						updateResourceRep( "preparing"  
						)
						if( checkMsgContent( Term.createTerm("order(ID,O)"), Term.createTerm("order(ID,O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurCID = payloadArg(0).toString().toInt()
												CurOrder = payloadArg(1).toString()	
								forward("setBarmanState", "setBarmanState(preparing($CurCID,$CurOrder))" ,"tearoomstate" ) 
						}
						stateTimer = TimerActor("timer_prepare", 
							scope, context!!, "local_tout_barman_prepare", Servicetime )
					}
					 transition(edgeName="t079",targetState="done",cond=whenTimeout("local_tout_barman_prepare"))   
				}	 
				state("done") { //this:State
					action { //it:State
						println("barman   |||   drinkReady")
						forward("setBarmanState", "setBarmanState(driknready)" ,"tearoomstate" ) 
						updateResourceRep( "drinkready"  
						)
						forward("drinkready", "drinkready($CurCID,$CurOrder)" ,"waitermind" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
