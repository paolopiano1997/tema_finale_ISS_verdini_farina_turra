/* Generated by AN DISI Unibo */ 
package it.unibo.maxstaytimer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maxstaytimer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var Table = 0
				var Action = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("maxstaytimer   |||   init")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("maxstaytimer   |||   wait")
					}
					 transition(edgeName="t074",targetState="doTimerAction",cond=whenDispatch("doTimerAction"))
					transition(edgeName="t075",targetState="timePassed",cond=whenDispatch("timePassed"))
				}	 
				state("doTimerAction") { //this:State
					action { //it:State
						println("maxstaytimer   |||   doTimerAction")
						if( checkMsgContent( Term.createTerm("doTimerAction(N,A)"), Term.createTerm("doTimerAction(N,A)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												Table = payloadArg(0).toString().toInt()
												Action = payloadArg(1)
								if(  Table==1  
								 ){if(  Action=="start"  
								 ){forward("starttimer", "starttimer(start)" ,"staytimertable1" ) 
								}
								else
								 {if(  Action=="stop"  
								  ){forward("stopstaytimer", "stopstaytimer(stop)" ,"staytimertable1" ) 
								 }
								 else
								  {forward("timeroff", "timeroff(off)" ,"staytimertable1" ) 
								  }
								 }
								}
								else
								 {if(  Action=="start"  
								  ){forward("starttimer", "starttimer(start)" ,"staytimertable2" ) 
								 }
								 else
								  {if(  Action=="stop"  
								   ){forward("stopstaytimer", "stopstaytimer(stop)" ,"staytimertable2" ) 
								  }
								  else
								   {forward("timeroff", "timeroff(off)" ,"staytimertable2" ) 
								   }
								  }
								 }
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("timePassed") { //this:State
					action { //it:State
						println("maxstaytimer   |||   timePassed")
						if( checkMsgContent( Term.createTerm("timePassed(N)"), Term.createTerm("timePassed(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Table = payloadArg(0).toString().toInt()  
								forward("timePassed", "timePassed($Table)" ,"waitermind" ) 
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
