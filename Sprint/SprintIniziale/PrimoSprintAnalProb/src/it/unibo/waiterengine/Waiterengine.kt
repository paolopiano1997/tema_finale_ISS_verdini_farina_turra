/* Generated by AN DISI Unibo */ 
package it.unibo.waiterengine

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiterengine ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.initAI(  )
						println("waiterengine   |||   init")
					}
					 transition(edgeName="t00",targetState="started",cond=whenRequest("start"))
				}	 
				state("started") { //this:State
					action { //it:State
						answer("start", "ready", "ready(waiterengine)"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("waiterengine   |||   wait")
					}
					 transition(edgeName="t01",targetState="planmove",cond=whenRequest("moveto"))
				}	 
				state("planmove") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveto(X,Y)"), Term.createTerm("moveto(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 XP = payloadArg(0)
											   YP = payloadArg(1)			  
								println("waiterengine   |||   moveto ($XP,$YP)")
								itunibo.planner.plannerUtil.planForGoal( "$XP", "$YP"  )
						}
					}
					 transition( edgeName="goto",targetState="execMove", cond=doswitch() )
				}	 
				state("execMove") { //this:State
					action { //it:State
						println("waiterengine   |||   execMo, curpos=($XP,$YP)")
						  CurMove = itunibo.planner.plannerUtil.getNextPlannedMove()  
						forward("cmd", "cmd($CurMove)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "$CurMove"  )
					}
					 transition( edgeName="goto",targetState="execMove", cond=doswitchGuarded({ CurMove.length > 0  
					}) )
					transition( edgeName="goto",targetState="endSuccess", cond=doswitchGuarded({! ( CurMove.length > 0  
					) }) )
				}	 
				state("endSuccess") { //this:State
					action { //it:State
						println("waiterengine   |||   endSuccess, curpos=($XP,$YP)")
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						answer("moveto", "done", "done($XP,$YP)"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
