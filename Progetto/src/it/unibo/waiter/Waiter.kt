/* Generated by AN DISI Unibo */ 
package it.unibo.waiter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Waiter    |||   init")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("waiter    |||   wait")
						updateResourceRep( "home"  
						)
					}
					 transition(edgeName="t00",targetState="accept",cond=whenRequest("enter"))
					transition(edgeName="t01",targetState="endwork",cond=whenDispatch("end"))
				}	 
				state("accept") { //this:State
					action { //it:State
						println("waiter    |||   accept")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="reachEntranceDoor", cond=doswitch() )
				}	 
				state("reachEntranceDoor") { //this:State
					action { //it:State
						println("waiter    |||   reachEntranceDoor")
						updateResourceRep( "reachingEntranceDoor"  
						)
						delay(2000) 
					}
					 transition(edgeName="t02",targetState="reachTable",cond=whenDispatch("ready"))
				}	 
				state("reachTable") { //this:State
					action { //it:State
						println("waiter    |||   reachTable")
						updateResourceRep( "reachingTable"  
						)
						delay(3000) 
					}
					 transition(edgeName="t03",targetState="reachExitDoor",cond=whenDispatch("ready"))
				}	 
				state("reachExitDoor") { //this:State
					action { //it:State
						println("waiter    |||   reachExitDoor")
						updateResourceRep( "reachingExitDoor"  
						)
						delay(2000) 
					}
					 transition( edgeName="goto",targetState="reachHome", cond=doswitch() )
				}	 
				state("reachHome") { //this:State
					action { //it:State
						println("waiter    |||   reachHome")
						updateResourceRep( "reachingHome"  
						)
						delay(4000) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("endwork") { //this:State
					action { //it:State
						terminate(0)
					}
				}	 
			}
		}
}
